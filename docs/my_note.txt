DaPars 检测APA事件

1. 简介
DaPars(Dynamic analysis of Alternative PolyAdenylation from RNA-seq)
Current version: 0.9.1


(1)引用方式
Please cite the following articles if you use DaPars in your research:

Masamha, C.P., Xia, Z., Yang, J., Albrecht, T.R., Li, M., Shyu, A., Li, W., Wagner, E.J. 2014. CFIm25 links Alternative Polyadenylation to Glioblastoma Tumor Suppression. Nature, 510:412-416.

Xia, Z., Donehower, L.A., Wheeler, D.A., Cooper, T.A., Neilson, J.R., Wagner E.J., Li, W. 2014. Dynamic Analyses of Alternative Polyadenylation from RNA-Seq Reveal 3'-UTR Landscape Across 7 Tumor Types. Nature Communications, 5:5274


(2) 版本
https://github.com/DawnEve/dapars

其他修改后的版本: https://github.com/DawnEve/dapars/network
https://github.com/mvdbeek/dapars/tree/WIP_sanitize

(3) 不知道和第二版啥关系？
https://github.com/crest2020/DaPars2
https://leilisysbio.github.io/DaPars2_Documentation/DaPars2.html

Given the annotated gene model, DaPars v2 can infer the de novo proximal APA sites as well as the long and short 3’UTR expression levels. 



(4) 另一个引用的
https://github.com/AndrewPattison/Dapars_pipeline/blob/master/hisat2_pipe.py







2. 安装 
$ git clone https://github.com/DawnEve/dapars.git
$ cd dapars/

主程序就2个py文件
$ ls -lth src/
total 32K
-rw-rw-r-- 1 wangjl wangjl 5.4K Jun  3 16:46 DaPars_Extract_Anno.py
-rw-rw-r-- 1 wangjl wangjl  23K Jun  3 16:46 DaPars_main.py
行数:
    152     393    5499 src/DaPars_Extract_Anno.py
    552    1393   23278 src/DaPars_main.py

这个是py2.7的脚本。安装依赖的包
$ pip install rpy2==2.8.1 --user ##可以了




压缩包里是测试数据:
$ unzip DaPars_Test_Dataset.zip 
$ ls DaPars_Test_Dataset -lh
total 83M
-rw-r--r-- 1 wangjl wangjl  39M May 27  2013 Condition_A_chrX.wig
-rw-r--r-- 1 wangjl wangjl  36M May 27  2013 Condition_B_chrX.wig
drwxr-xr-x 2 wangjl wangjl 4.0K Jun  7  2013 DaPars_Test_data
-rw-r--r-- 1 wangjl wangjl  344 May 28  2013 DaPars_test_data_configure.txt
-rw-r--r-- 1 wangjl wangjl 776K Feb  7  2015 hg19_4_19_2012_Refseq_id_from_UCSC.txt
-rw-r--r-- 1 wangjl wangjl 1.3M Apr 17  2015 hg19_refseq_extracted_3UTR.bed
-rw-r--r-- 1 wangjl wangjl 6.2M Apr 17  2012 hg19_refseq_whole_gene.bed

$ ls DaPars_Test_Dataset/DaPars_Test_data/ -lh
total 52K
-rw-r--r-- 1 wangjl wangjl 52K May 28  2013 DaPars_Test_data_All_Prediction_Results.txt





3. 教程
(1)
原始文档打不开，估计网站调整删了。
找到一个转载的: https://www.jianshu.com/p/21b697cec428

py2.7环境下：

refbed=/media/pc/disk1/sun/refdata/ensembl_GRCm38/mm10.gencode-vm18.compre.fine.bed

genesymbol=/media/pc/disk1/sun/refdata/ensembl_GRCm38/Dapars_gene.symbol

python /home/pc/biosoft/dapars/src/DaPars_Extract_Anno.py -b $refbed -s $genesymbol -o Dapars_extracted_3UTR.bed


对于新安装dapars的情况：
1).需要在py2.7下使用pip install rpy2==1.8.4安装rpy2的低级版本
2).选择bedtools的bam转为bedgraph功能的-bga（和-split）模式
3).修改脚本507行增加float，匹配bedtools的浮点数输出



(2) https://firas.io/post/dapars/






4. 实战准备(3个文件)
You can find more details on the documentation page, but in essence, DaPars requires the following 3 files:
- BED file: a tab separated, 12 columns, which represents the gene model.
- BedGraph file: stores the reads alignment results from an aligned BAM file.
- Gene Symbol file: two columns containing NCBI RefSeq and gene symbol.


(1) The BED file of the gene model can be downloaded from UCSC Table Browser.

http://genome.ucsc.edu/cgi-bin/hgTables?command=start

genome: mouse
assembly: July 2007 (NCBI37/mm9)
group: Genes and Gene Predictions
track: REfSeq Genes
table: refGene
region: genome
output format: BED - browser extensible data
output file: mm9_refseq_whole_gene.bed


我的是mm10
genome: mouse
assembly: July 2011 (GRCm38/mm10)
group: Genes and Gene Predictions
track: NCBI REfSeq
table: UCSC RefSeq(refGene)
region: genome
output format: BED - browser extensible data
output file: mm10_refseq_whole_gene.bed


Click ‘get output’ button, and in the next page ‘Output refGene as BED’ click ‘get BED’ button.


复制到服务器:
$ head /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_whole_gene.bed
chr1	134199214	134235457	NM_001039510	0	-	134202950	134234355	0	3	4376,398,230,	0,34800,36013,
chr1	134199214	134235457	NM_001282945	0	-	134202950	134234355	0	3	4376,432,230,	0,34800,36013,
chr1	134199214	134235457	NM_001008533	0	-	134202950	134234355	0	2	4376,1443,	0,34800,
chr1	134199214	134235457	NM_001291930	0	-	134202950	134203505	0	2	4376,230,	0,36013,
chr1	134199214	134234856	NM_001291928	0	-	134202950	134234733	0	2	4376,194,	0,35448,
chr1	58713285	58733227	NR_149255	0	+	58733227	58733227	0	4	374,427,136,975,	0,13020,17866,18967,

$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_whole_gene.bed | awk '{print $1}' | sort | uniq -c
   2545 chr1
   2254 chr10
   3480 chr11
   1600 chr12
   1610 chr13
   1757 chr14
   1686 chr15
   1430 chr16
   2306 chr17
   1157 chr18
   1512 chr19
      2 chr1_GL456211_random
      4 chr1_GL456212_random
      4 chr1_GL456221_random
#



############ 第二次下载
我的是mm10
genome: mouse
assembly: July 2011 (GRCm38/mm10)
group: Genes and Gene Predictions
track: GENCODE VM23
table: knownGene
region: genome
output format: BED - browser extensible data
output file: mm10_GENCODE_VM23_knownGene.bed


$ head /home/wangjl/data/ref/mouse/UCSC/mm10_GENCODE_VM23_knownGene.bed
chr1	3073252	3074322	ENSMUST00000193812.1	0	+	3073252	3073252	0	1	1070,	0,
chr1	3102015	3102125	ENSMUST00000082908.1	0	+	3102015	3102015	0	1	110,	0,
chr1	3206522	3215632	ENSMUST00000159265.1	0	-	3206522	3206522	0	2	795,2194,	0,6916,

$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_GENCODE_VM23_knownGene.bed | awk '{print $1}' | sort | uniq -c
   8579 chr1
   6605 chr10
   8700 chr11
   5371 chr12
   5644 chr13
   5873 chr14
   5157 chr15
   4514 chr16
   7098 chr17
   3573 chr18
   4339 chr19
      5 chr1_GL456210_random
      7 chr1_GL456211_random
      2 chr1_GL456212_random
      7 chr1_GL456221_random
#




(2) To generate the BedGraph files from BAM files, you need the chromsome size file chromInfo.txt.gz which can be downloaded from UCSC (hg19 or mm9) and then use the BedTools' genomecov as follow:

http://hgdownload.soe.ucsc.edu/goldenPath/mm10/database/
$ wget http://hgdownload.soe.ucsc.edu/goldenPath/mm10/database/chromInfo.txt.gz
$ gunzip chromInfo.txt.gz 

## /home/wangjl/data/ref/mouse/UCSC/
$ mv chromInfo.txt  mm10_chr_size.txt
$ head mm10_chr_size.txt
chr1    195471971       /gbdb/mm10/mm10.2bit
chr2    182113224       /gbdb/mm10/mm10.2bit


## http://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
$ bedtools genomecov -bg -ibam sample_sorted.bam -g mm9_chr_size.txt -split > sample.bedgraph

Usage: bedtools genomecov [OPTIONS] -i <bed/gff/vcf> -g <genome> 
参数解释:
Version: v2.29.2
-bg             Report depth in BedGraph format. For details, see: 输出bedGraph格式
        genome.ucsc.edu/goldenPath/help/bedgraph.html

-ibam           The input file is in BAM format.
             Note: BAM _must_ be sorted by position 输入 排序过的 bam。
-g  <genome>  The genome file should tab delimited and structured as follows: 
         <chromName><TAB><chromSize>                                        

        For example, Human (hg19):                    
        chr1    249250621
        chr2    243199373
        ...
        chr18_gl000207_random   4262
-split   Treat "split" BAM or BED12 entries as distinct BED intervals when computing coverage. 
		没看懂啥意思??
		   For BAM files, this uses the CIGAR "N" and "D" operations to infer the blocks for computing coverage. 
		   For BED12 files, this uses the BlockCount, BlockStarts, and BlockEnds fields (i.e., columns 10,11,12). 

实战
$ bedtools genomecov -bg -ibam /data/wangjl/ZhangMin/map/ADK_KO_1Aligned.sortedByCoord.out.bam \
-g /home/wangjl/data/ref/mouse/UCSC/mm10_chr_size.txt -split > /data/wangjl/ZhangMin/bedGraph/KO_1.bedgraph

## WARNING: Genome (-g) files are ignored when BAM input is provided. 也就是说有bam了，就不需要 -g参数提供chr大小了。
# 21:21 -> 21:22

$ bedtools genomecov -bg -ibam /data/wangjl/ZhangMin/map/ADK_KO_2Aligned.sortedByCoord.out.bam -split > /data/wangjl/ZhangMin/bedGraph/KO_2.bedgraph
$ bedtools genomecov -bg -ibam /data/wangjl/ZhangMin/map/ADK_KO_3Aligned.sortedByCoord.out.bam -split > /data/wangjl/ZhangMin/bedGraph/KO_3.bedgraph




# 批量 
for i in 1 2 3
do echo $i;
bedtools genomecov -bg -ibam /data/wangjl/ZhangMin/map/ADK_WT_${i}Aligned.sortedByCoord.out.bam -split > /data/wangjl/ZhangMin/bedGraph/WT_${i}.bedgraph &
done;


$ ls -lth
total 2.1G
-rw-rw-r-- 1 wangjl wangjl 370M Jun  3 21:34 WT_1.bedgraph
-rw-rw-r-- 1 wangjl wangjl 357M Jun  3 21:34 WT_3.bedgraph
-rw-rw-r-- 1 wangjl wangjl 351M Jun  3 21:34 WT_2.bedgraph
-rw-rw-r-- 1 wangjl wangjl 340M Jun  3 21:32 KO_3.bedgraph
-rw-rw-r-- 1 wangjl wangjl 346M Jun  3 21:32 KO_2.bedgraph
-rw-rw-r-- 1 wangjl wangjl 344M Jun  3 21:22 KO_1.bedgraph


# fix后面报错: 删除掉除1-19XY之外的行.
$ for id in `seq 1 3`
do echo $id;
cat KO_${id}.bedgraph | sed '/^[GJM]/d' > trimKO_${id}.bedgraph;
cat WT_${id}.bedgraph | sed '/^[GJM]/d' > trimWT_${id}.bedgraph;
done;

# check: 删除了多少行？22828行(0.15%)
14863801  59455204 360507299 KO_1.bedgraph
14840973   59363892  404533692 trimKO_1.bedgraph


# fix后面报错: 添加chr前缀.
$ for id in `seq 1 3`
do echo $id;
sed -i 's/^/chr/' trimKO_${id}.bedgraph;
sed -i 's/^/chr/' trimWT_${id}.bedgraph;
done;




(3)The Gene Symbol file can be downloaded from UCSC Table Browser.

http://genome.ucsc.edu/cgi-bin/hgTables?command=start

genome: mouse
assembly: July 2007 (NCBI37/mm9)
group: Genes and Gene Predictions
track: REfSeq Genes
table: refGene
region: genome
output format: selected fields from primary and related tables
output file: mm9_30_03_2016_Refseq_id_from_UCSC.txt
Click ‘get output’ button, and in the next page select


我的是mm10
genome: mouse
assembly: July 2011 (GRCm38/mm10)
group: Genes and Gene Predictions
track: NCBI RefSeq
table: UCSC RefSeq(refGene)
region: genome
output format: selected fields from primary and related tables
output file: mm10_20210603_Refseq_id_from_UCSC.txt
Click ‘get output’ button, and in the next page select


name: Name of gene (usually transcript_id from GTF)
name2: Alternate name (e.g. gene_id from GTF)
Click ‘get output’ and save the file.

复制到服务器：
/home/wangjl/data/ref/mouse/UCSC/mm10_20210603_Refseq_id_from_UCSC.txt




5. 实战运行
(1). Generate region annotation
DaPars will use the extracted distal polyadenylation sites to infer the proximal polyadenylation sites based on the alignment files.
再比对文件上，使用远端位点，来推测近端位点。

$ python DaPars_Extract_Anno.py -b mm9_refseq_whole_gene.bed -s mm9_30_03_2016_Refseq_id_from_UCSC.txt -o mm9_refseq_extracted_3UTR.bed
参数解释:
-b GENE_BED_FILE : The gene model in BED format 基因的模型(bed格式的gtf文件)
-s Gene_Symbol_FILE : The mapping of transcripts to gene symbol, which can be extracted from UCSC Tables. 
	翻译基因名字(NM_001293804 -> Cflar, NM_008798	-> Pdcd1
-o OUTPUT_FILE : The output of the extracted annotation region.



我的实战
$ mouseRefDir=/home/wangjl/data/ref/mouse/UCSC
$ python ~/soft/dapars/src/DaPars_Extract_Anno.py -b ${mouseRefDir}/mm10_refseq_whole_gene.bed -s ${mouseRefDir}/mm10_20210603_Refseq_id_from_UCSC.txt -o ${mouseRefDir}/mm10_refseq_extracted_3UTR.bed
# 10s; Total extracted 3' UTR: 29949

# 一共 2.9万个UTR区域。
28990  173940 1554200 /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed

$ head /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed 
chrX	103024096	103025727	NR_166892|Gm39529|chrX|-	0	-
chr6	95126477	95129793	NM_001008785|Kbtbd8|chr6|+	0	+
chr11	74908843	74909340	NM_177325|Tsr1|chr11|+	0	+
chr7	110308013	110309496	NM_177324|Sbf2|chr7|-	0	-
chr19	46675292	46682093	NR_166896|Gm41857|chr19|+	0	+
chr13	30380902	30382867	NM_177322|Agtr1a|chr13|+	0	+
chr9	90823295	90826115	NR_166895|Gm28703|chr9|-	0	-
chr14	86264142	86265814	NR_166898|Gm32815|chr14|-	0	-

也就是说到这一步时，只保留了1-19,XY, 去掉了其他的部分。
$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed | awk '{print $1}' | sort | uniq -c
   1656 chr1
   1395 chr10
   2147 chr11
   1014 chr12
   1127 chr13
   1085 chr14
   1065 chr15
    931 chr16
   1420 chr17
    682 chr18
    937 chr19
   2422 chr2
   1357 chr3
   1765 chr4
   1690 chr5
   1547 chr6
   2495 chr7
   1371 chr8
   1563 chr9
   1239 chrX
     82 chrY
#



(2). Sample processing
The files generated in step 1 above will be used in step 2. 
Also for this step, you need to generate configure_file for each sample. For example


######################## 原始参考例子
#The following file is the result of step 1.
Annotated_3UTR=mm9_refseq_extracted_3UTR.bed

#A comma-separated list of BedGraph files of samples from condition 1
Group1_Tophat_aligned_Wig=KO1.bedgraph,KO2.bedgraph,KO3.bedgraph

#A comma-separated list of BedGraph files of samples from condition 2
Group2_Tophat_aligned_Wig=WT1.bedgraph,WT2.bedgraph,WT3.bedgraph

Output_directory=DaPars_Output_Condition1/
Output_result_file=DaPars_Output_Condition1

#At least how many samples passing the coverage threshold in two conditions
Num_least_in_group1=1
Num_least_in_group2=1

Coverage_cutoff=30

#Cutoff for FDR of P-values from Fisher exact test.

FDR_cutoff=0.05
PDUI_cutoff=0.5
Fold_change_cutoff=0.59
########################



$ cd /home/wangjl/data/ZhangMin/bedGraph/
$ cat configure_file_ADK.config
########################
#(1)3UTR annotation: The following file is the result of step 1.
Annotated_3UTR=/home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed 

#(2)sample bedGraph: A comma-separated list of BedGraph files of samples from condition 1
Group1_Tophat_aligned_Wig=trimKO_1.bedgraph,trimKO_2.bedgraph,trimKO_3.bedgraph

#A comma-separated list of BedGraph files of samples from condition 2
Group2_Tophat_aligned_Wig=trimWT_1.bedgraph,trimWT_2.bedgraph,trimWT_3.bedgraph

Output_directory=DaPars_Output_Condition1/
Output_result_file=DaPars_Output_Condition1

#At least how many samples passing the coverage threshold in two conditions
Num_least_in_group1=1
Num_least_in_group2=1

Coverage_cutoff=30

#Cutoff for FDR of P-values from Fisher exact test.
FDR_cutoff=0.05
PDUI_cutoff=0.5
Fold_change_cutoff=0.59
########################


$ python ~/soft/dapars/src/DaPars_main.py configure_file_ADK.config
[Fri 04 Jun 2021 10:32:07 AM ] Start Analysis ...
[Fri 04 Jun 2021 10:32:07 AM ] Loading coverage ...
[Fri 04 Jun 2021 10:34:04 AM ] Loading coverage finished ...
[Fri 04 Jun 2021 10:34:04 AM ] Filtering the result ...
[Fri 04 Jun 2021 10:34:04 AM ] Finished!
## 很快，2min。







##########################
### -> 排错记录1: UnboundLocalError: local variable 'chrom_name' referenced before assignment

报错的原因，因该是染色体的名字， chr1 和 1 不一致导致的。
$ head /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed 
chr6    95126477        95129793        NM_001008785|Kbtbd8|chr6|+      0       +

$ head KO_1.bedgraph
1       3044513 3044615 2

使用sed -i去修改3UTR.bed文件。
$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed | sed 's/^chr//' > /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR_noChr.bed

$ head /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR_noChr.bed 
X	103024096	103025727	NR_166892|Gm39529|chrX|-	0	-
6	95126477	95129793	NM_001008785|Kbtbd8|chr6|+	0	+




### -> 报错记录2: 再执行还是报这个错
File "/home/wangjl/soft/dapars/src/DaPars_main.py", line 509, in Load_Target_Wig_files
    curr_sample_All_chroms_coverage_dict[chrom_name][1].append(0)
UnboundLocalError: local variable 'chrom_name' referenced before assignment

怀疑是染色体有些不存在于bed中。
$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR_noChr.bed | awk '{print $1}' | sort|uniq -c
   1656 1
   1395 10
   2147 11
   1014 12
   1127 13
   1085 14
   1065 15
    931 16
   1420 17
    682 18
    937 19
   2422 2
   1357 3
   1765 4
   1690 5
   1547 6
   2495 7
   1371 8
   1563 9
   1239 X
     82 Y

$ cat /home/wangjl/data/ZhangMin/bedGraph/KO_1.bedgraph | awk '{print $1}' | sort|uniq -c
 928655 1
 733723 10
    260 GL456221.1
   1150 GL456233.1
    106 JH584293.1
  13510 MT
 439871 X
  20277 Y
#
怎么处理？要么把ensembl的gtf转为bed，要么去掉bedGraph中的GL开头的行。
回去尝试了一下，bed中包含了很多，但是都被第一步生成3UTR.bed去掉了。
只能尝试第二个方案了：去掉bedGraph中的1-19XY之外的部分，也就是去掉开头是GJM的行。

$ cat KO_1.bedgraph | sed '/^[GJM]/d' |  awk '{print $1}'|sort |uniq -c


### -> 报错记录3: 再执行还是报这个错
还是报错，看源代码必须要有chr开头，否则跳过。
好吧，前面折腾的再折腾回去











6. 结果查看
(1) 只有一个输出文件
$ ls -lth DaPars_Output_Condition1/
total 4.0K
-rw-rw-r-- 1 wangjl wangjl 344 Jun  4 10:34 DaPars_Output_Condition1_All_Prediction_Results.txt


$ cd DaPars_Output_Condition1/
$ wc DaPars_Output_Condition1_All_Prediction_Results.txt
  1  28 344 DaPars_Output_Condition1_All_Prediction_Results.txt
除了一行表头，啥也没有。

$ cat DaPars_Output_Condition1_All_Prediction_Results.txt 
Gene    fit_value       Predicted_Proximal_APA  Loci    A_1_long_exp    A_1_short_exp   A_1_PDUI        A_2_long_exp    A_2_short_exp   A_2_PDUI        A_3_long_exp    A_3_short_exp   A_3_PDUI       B_1_long_exp    B_1_short_exp   B_1_PDUI        B_2_long_exp    B_2_short_exp   B_2_PDUI        B_3_long_exp    B_3_short_exp   B_3_PDUI        Group_A_Mean_PDUI       Group_B_Mean_PDUI      PDUI_Group_diff P_val   adjusted.P_val  Pass_Filter



(2) 降低筛选条件，再试一下
$ cd /home/wangjl/data/ZhangMin/bedGraph/
$ cat configure_file_ADK_2.config
########################
#(1)3UTR annotation: The following file is the result of step 1.
Annotated_3UTR=/home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed 

#(2)sample bedGraph: A comma-separated list of BedGraph files of samples from condition 1
Group1_Tophat_aligned_Wig=trimKO_1.bedgraph,trimKO_2.bedgraph,trimKO_3.bedgraph

#A comma-separated list of BedGraph files of samples from condition 2
Group2_Tophat_aligned_Wig=trimWT_1.bedgraph,trimWT_2.bedgraph,trimWT_3.bedgraph

Output_directory=DaPars_Output_Condition1/
Output_result_file=DaPars_Output_Condition2

#At least how many samples passing the coverage threshold in two conditions
Num_least_in_group1=1
Num_least_in_group2=1

Coverage_cutoff=10

#Cutoff for FDR of P-values from Fisher exact test.
FDR_cutoff=0.1
PDUI_cutoff=0.5
Fold_change_cutoff=0.26
########################


$ python ~/soft/dapars/src/DaPars_main.py configure_file_ADK_2.config
[Fri 04 Jun 2021 11:07:08 AM ] Start Analysis ...
[Fri 04 Jun 2021 11:07:08 AM ] Loading coverage ...
[Fri 04 Jun 2021 11:09:13 AM ] Loading coverage finished ...
[Fri 04 Jun 2021 11:26:51 AM ] Filtering the result ...
[Fri 04 Jun 2021 11:27:07 AM ] Finished!
# 耗时 20min。

-rw-rw-r-- 1 wangjl wangjl 1.5M Jun  4 11:27 DaPars_Output_Condition2_All_Prediction_Results.txt

$ head DaPars_Output_Condition2_All_Prediction_Results.txt
Gene	fit_value	Predicted_Proximal_APA	Loci	A_1_long_exp	A_1_short_exp	A_1_PDUI	A_2_long_exp	A_2_short_exp	A_2_PDUI	A_3_long_exp	A_3_short_exp	A_3_PDUI	B_1_long_exp	B_1_short_exp	B_1_PDUI	B_2_long_exp	B_2_short_exp	B_2_PDUI	B_3_long_exp	B_3_short_exp	B_3_PDUI	Group_A_Mean_PDUI	Group_B_Mean_PDUI	PDUI_Group_diff	P_val	adjusted.P_val	Pass_Filter
NM_001362158|Zfp382|chr7|+	129.1	30133628	chr7:30133266-30140755	7.96	24.43	0.25	7.39	16.60	0.31	7.84	26.51	0.23	8.38	34.02	0.20	9.21	36.21 0.20	7.92	35.15	0.18	0.263333333333	0.193333333333	0.07	0.571105989072	1.0	N
NM_008548|Man1a|chr10|-	482.4	53907362	chr10:53904785-53907563	35.22	0.00	1.00	35.57	0.00	1.00	37.18	0.00	1.00	33.04	0.00	1.00	29.64	0.00	1.00  26.75	0.00	1.00	1.0	1.0	0.0	1.0	1.0	N
NM_018818|Chm|chrX|-	247.5	113042593	chrX:113040592-113043635	15.70	9.41	0.63	11.62	10.82	0.52	10.82	11.83	0.48	8.62	35.74	0.19	12.19	28.70 0.30	13.04	25.92	0.33	0.543333333333	0.273333333333	0.27	0.053224539631	0.578565603214	N

$ cat /data/wangjl/ZhangMin/bedGraph/DaPars_Output_Condition1/DaPars_Output_Condition2_All_Prediction_Results.txt | awk '{print $28}' | sort | uniq -c
   6618 N
      1 Pass_Filter
      3 Y

## 只有3给过标准了
$ cat /data/wangjl/ZhangMin/bedGraph/DaPars_Output_Condition1/DaPars_Output_Condition2_All_Prediction_Results.txt | awk '{if($28=="Y")print $1}'
NM_001081427|Flnb|chr14|+
NM_009478|Urod|chr4|-
NM_183201|Slfn5|chr11|+

$ cat /data/wangjl/ZhangMin/bedGraph/DaPars_Output_Condition1/DaPars_Output_Condition2_All_Prediction_Results.txt | awk '{if($28=="Y")print $0}'
NM_001081427|Flnb|chr14|+	2075.4	7950506	chr14:7950305-7951587	65.50	2.30	0.97	68.33	19.41	0.78	77.64	7.11	0.92	26.14	17.60	0.60	20.96	48.16	0.30  24.31	64.53	0.27	0.89	0.39	0.5	9.66088276465e-12	1.6830274711e-09	Y
NM_009478|Urod|chr4|-	38.3	116990247	chr4:116989965-116990448	8.42	38.71	0.18	4.75	34.24	0.12	8.71	29.53	0.23	36.79	17.28	0.68	44.31	1.77  0.96	49.24	12.06	0.80	0.176666666667	0.813333333333	-0.636666666667	4.06784428433e-10	5.98425092495e-08	Y
NM_183201|Slfn5|chr11|+	41182.8	82963447	chr11:82960900-82964850	124.25	187.23	0.40	103.90	181.48	0.36	104.20	178.65	0.37	310.33	4.00	0.99	269.28	12.45	0.96  323.72	0.00	1.00	0.376666666667	0.983333333333	-0.606666666667	1.76617701247e-67	2.33841836451e-64	Y

加上表头:
Gene    fit_value       Predicted_Proximal_APA  Loci    A_1_long_exp    A_1_short_exp   A_1_PDUI        A_2_long_exp    A_2_short_exp   A_2_PDUI        A_3_long_exp    A_3_short_exp   A_3_PDUI       B_1_long_exp    B_1_short_exp   B_1_PDUI        B_2_long_exp    B_2_short_exp   B_2_PDUI        B_3_long_exp    B_3_short_exp   B_3_PDUI        Group_A_Mean_PDUI       Group_B_Mean_PDUI      PDUI_Group_diff P_val   adjusted.P_val  Pass_Filter



(3) 使用R读取，排序过滤一下
过滤条件: adjP<0.05 & absDiff>0.2.

	Gene	Loci	PDUI_Group_diff	adjusted.P_val	Pass_Filter
1146	NM_009478|Urod|chr4|-	chr4:116989965-116990448	-0.6366667	5.98E-08	Y
3696	NM_183201|Slfn5|chr11|+	chr11:82960900-82964850	-0.6066667	2.34E-64	Y
1046	NM_001081427|Flnb|chr14|+	chr14:7950305-7951587	0.5	1.68E-09	Y
6096	NM_011050|Pdcd4|chr19|+	chr19:53929083-53929659	0.45	3.90E-02	N
941	NM_001379283|Eri3|chr4|+	chr4:117673741-117674281	-0.3966667	3.06E-03	N
1099	NM_001285902|Eri3|chr4|+	chr4:117673741-117674297	-0.3966667	3.06E-03	N
1242	NM_009643|Ahnak|chr19|+	chr19:9001699-9019196	0.3833333	8.72E-13	N
1857	NM_198025|Flvcr1|chr1|-	chr1:191024909-191026190	0.38	1.09E-09	N
3281	NM_001290741|Cnot6|chr11|-	chr11:49671497-49675405	-0.37	5.85E-05	N
2599	NM_013590|Lyz1|chr10|-	chr10:117287795-117288649	0.3633333	5.23E-05	N
4007	NM_001159517|Qk|chr17|-	chr17:10206471-10209631	-0.3633333	3.34E-04	N
4541	NM_031195|Msr1|chr8|-	chr8:39603452-39605982	0.35	1.86E-25	N
799	NM_133952|Unc45a|chr7|-	chr7:80325292-80325877	-0.3433333	4.10E-03	N
4491	NM_001359632|Tmem259|chr10|-	chr10:79977190-79977853	-0.33	4.30E-03	N
2549	NM_021501|Pias4|chr10|-	chr10:81153966-81154372	0.3233333	1.71E-03	N
6601	NM_001134646|Tomm5|chr4|-	chr4:45105210-45105644	-0.3233333	3.82E-03	N
590	NM_001038708|Cdc42se1|chr3|+	chr3:95234250-95236424	0.3133333	2.54E-02	N
925	NM_001161730|Tap1|chr17|+	chr17:34196568-34197225	-0.3066667	2.27E-16	N
1576	NM_144860|Mib1|chr18|+	chr18:10811985-10818578	0.3033333	4.28E-04	N
1993	NM_001372469|Ssbp4|chr8|-	chr8:70597490-70598120	0.29	9.44E-11	N
5719	NM_153588|Mrtfb|chr16|+	chr16:13412160-13417529	0.2833333	2.05E-02	N
5140	NM_008533|Cd180|chr13|+	chr13:102704705-102706631	0.28	1.25E-14	N
5772	NM_010124|Eif4ebp2|chr10|-	chr10:61432497-61433828	0.28	7.58E-04	N
5209	NM_001160019|Tor1aip1|chr1|-	chr1:156004599-156007709	-0.27	8.29E-21	N
3055	NM_001357299|Tgfbrap1|chr1|-	chr1:43047200-43049835	0.27	8.72E-03	N
6065	NM_023168|Grina|chr15|+	chr15:76249217-76249904	-0.2633333	8.27E-09	N
5584	NM_001377103|Fam219a|chr4|-	chr4:41518929-41520395	0.2633333	2.98E-04	N
2212	NM_001310639|Stap1|chr5|+	chr5:86103700-86104000	-0.2633333	1.20E-03	N
89	NM_001377102|Fam219a|chr4|-	chr4:41518929-41520398	0.2633333	2.54E-03	N
1179	NM_172856|Cers6|chr2|+	chr2:69108442-69114283	0.26	1.06E-04	N
4558	NM_007807|Cybb|chrX|-	chrX:9435254-9438343	0.2566667	7.73E-146	N
4547	NM_001347332|Pisd|chr5|-	chr5:32736301-32737454	-0.2566667	1.40E-09	N
1204	NM_001252638|Rhobtb1|chr10|+	chr10:69289520-69291784	0.2566667	1.44E-02	N
1214	NM_177298|Pisd|chr5|-	chr5:32736314-32737454	-0.2533333	1.40E-09	N
4763	NM_019769|Chp1|chr2|+	chr2:119585107-119587022	0.2533333	1.14E-03	N
6010	NM_009752|Glb1|chr9|+	chr9:114473838-114474379	-0.2533333	3.32E-02	N
2100	NM_009911|Cxcr4|chr1|-	chr1:128588199-128589901	-0.2433333	2.88E-14	N
5654	NM_198895|Abr|chr11|-	chr11:76416732-76419193	0.2433333	5.19E-06	N
4206	NM_001346670|Abr|chr11|-	chr11:76416792-76419193	0.2433333	5.63E-06	N
418	NM_018775|Tbc1d8|chr1|-	chr1:39371910-39372786	-0.2433333	2.09E-03	N
6348	NM_139311|Mllt6|chr11|+	chr11:97681546-97685458	0.24	1.57E-02	N
4969	NM_145974|N4bp3|chr11|-	chr11:51643089-51644148	0.24	2.79E-02	N
6094	NR_168575|Gm51871|chr11|+	chr11:94357259-94357761	-0.24	2.99E-02	N
6126	NM_001042484|Golga7|chr8|-	chr8:23241326-23242631	-0.24	4.34E-02	N
1777	NM_010183|Fbrs|chr7|+	chr7:127489689-127491500	0.2366667	5.63E-06	N
5409	NM_001347171|Mbd6|chr10|-	chr10:127281959-127282907	0.2333333	2.11E-02	N
2849	NM_001310682|Prkcd|chr14|-	chr14:30595354-30596025	-0.23	2.64E-06	N
3679	NM_001163160|Pcyt1a|chr16|+	chr16:32471297-32475065	0.2266667	5.30E-03	N
2218	NM_144525|Tmem214|chr5|+	chr5:30876664-30877469	-0.2266667	9.35E-03	N
5750	NM_008538|Marcks|chr10|-	chr10:37133243-37136935	0.22	2.55E-14	N
5846	NM_010576|Itga4|chr2|+	chr2:79326520-79332491	0.22	5.27E-03	N
5119	NM_134003|Zc3h10|chr10|-	chr10:128543560-128545538	0.22	2.05E-02	N
3128	NM_007480|Arf5|chr6|+	chr6:28426072-28426602	-0.2166667	2.29E-06	N
6503	NM_019760|Serinc1|chr10|-	chr10:57515775-57517292	-0.2133333	2.11E-06	N
4873	NM_001199284|Slc43a2|chr11|+	chr11:75572315-75577572	-0.2033333	5.33E-41	N
1010	NM_001145950|5730409E04Rik|chr4|+	chr4:126611676-126614371	0.2033333	1.41E-02	N
4337	NM_001013755|5730409E04Rik|chr4|+	chr4:126611681-126614371	0.2033333	1.42E-02	N




